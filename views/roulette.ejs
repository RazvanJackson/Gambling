<% include ./components/header.ejs %>
<script src="https://code.jquery.com/jquery-3.2.1.js" integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE=" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>

<div class="columns" id="roulette-app">
    <div class="column">

    </div>
    <div class="column is-9 ">
        <div class="timer">{{timerMessage}}</div>
        <div id="roulette"><div class="winner"></div></div>
            <div class="columns">
                <div class="column">
                    <input class="input" name="amount" type="text" value="0" v-model="amount">
                </div>
                <div class="column">
                    <button class="button"><span>X*2</span></button>
                </div>
                <div class="column">
                    <button class="button"><span>X/2</span></button>
                </div>
                <div class="column">
                    <button class="button"><span>Clear</span></button>
                </div>
            </div>
            <div class="columns">
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-danger" value="red" :disabled="!activeBetting"  @click.self.prevent="Bet($event)"><span>Red</span></button>
                    <div class="active-players columns box">
                        <div class="column red-players-username-box"></div>
                        <div class="column red-players-amount-box"></div>
                    </div>
                </div>
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-success" value="green" :disabled="!activeBetting" @click.self.prevent="Bet($event)"><span>Green</span></button>
                    <div class="active-players columns box">
                        <div class="column green-players-username-box"></div>
                        <div class="column green-players-amount-box"></div>
                    </div>
                </div>
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-black" value="black" :disabled="!activeBetting"  @click.self.prevent="Bet($event)"><span>Black</span></button>
                    <div class="active-players columns box">
                        <div class="column black-players-username-box"></div>
                        <div class="column black-players-amount-box"></div>
                    </div>
                </div>
            </div>
            <input type="hidden" name='details'>
    </div>
</div>

<% include ./components/footer.ejs %>
<script>
    var myRoulette = io('http://localhost:3000/my-roulette', {forceNew: false});

    const app = new Vue({
    el: '#roulette-app',
    data:{
        timerMessage:null,
        timer: null,

        amount:null,

        activePlayers: [],

        winningNumber: undefined,
        activeBetting: undefined,

        allNumbers: [1,14,2,13,3,12,4,0,11,5,10,6,9,7,8],
    },
    methods:{
        Bet(event){
            let choosenColor = event.target.value;
            if(app.timer>=0 && !isNaN(app.amount)){
                console.log('bet works');
                myRoulette.emit('bet', {choosenColor: choosenColor, amount:app.amount});
            }
        },

        Spin(){
            let $roulette = $('#roulette');
            let $rouletteWidth = $roulette.width();
            let $rouletteNumberWidth = 75;
            let $roulettePosition;

            let positiveNumersHelper;
            let result = ($rouletteWidth / $rouletteNumberWidth) / Math.floor($rouletteWidth / $rouletteNumberWidth);

            let allNumbers = app.allNumbers;
            let positiveNumbers = [];
            let negativeNumbers = [];

            let winningNumber = app.winningNumber;

            if(result != 1) positiveNumersHelper = Math.floor($rouletteWidth / $rouletteNumberWidth / 2) + 1;
            else if(result == 1 ) positiveNumersHelper = result;

            for(let i = positiveNumersHelper -1 ; i>=0; i--){
                positiveNumbers.push(allNumbers[i]);
            }
            for(let i = positiveNumersHelper ; i< allNumbers.length; i++){
                negativeNumbers.push(allNumbers[i]);
            }

            if(positiveNumbers.includes(winningNumber)){
                let posHelper = positiveNumbers.indexOf(winningNumber) * 75;
                $roulette.css({'background-position-x': 0});
                $roulette.addClass('roulette-spin');
                $roulette.css({'--spin': posHelper + (1125 * 8)});
            }
            else if(negativeNumbers.includes(winningNumber)){
                let posHelper = negativeNumbers.indexOf(winningNumber) * 75 * -1;
                $roulette.css({'background-position-x': 0});
                $roulette.addClass('roulette-spin');
                $roulette.css({'--spin': -75 + posHelper - (1125 * 8)})
            }
        },

        emptyPlayers(){
            $('.red-players-username-box').empty();
            $('.red-players-amount-box').empty();
            $('.green-players-username-box').empty();
            $('.green-players-amount-box').empty();
            $('.green-players-username-box').empty();
            $('.green-players-amount-box').empty();
        },

        newPlayer(data){
            console.log(data);
            $('.'+data.newPlayer.choosenColor+'-players-username-box').append('<p class="username">'+data.newPlayer.username+'</p>');
            $('.'+data.newPlayer.choosenColor+'-players-amount-box').append('<p class="amount">'+data.newPlayer.amount+'</p>');
        },

        onMountPlayers(){
            if(this.activePlayers.length>0){
                this.activePlayers.forEach(function(activePlayer){
                    $('.'+activePlayer.choosenColor+'-players-username-box').append('<p class="username">'+activePlayer.username+'</p>');
                    $('.'+activePlayer.choosenColor+'-players-amount-box').append('<p class="amount">'+activePlayer.amount+'</p>');
                });
            }
        }
    },
    watch:{
        timer(){
            let $roulette = $('#roulette');
            if(app.timer>0){
                app.activeBetting = true;
            } 
            else app.activeBetting = false;

            if(app.timer==-9) this.emptyPlayers();
        },
    },

    mounted(){

        myRoulette.on('sendPlayer', function(data){
            app.newPlayer(data);
            $('.active-players').show();
        });

        myRoulette.on('getPlayers', function(data){
            app.activePlayers = data.activePlayers;
            app.onMountPlayers()
        });

        myRoulette.on('sendData', function(data){
            app.timer = data.timer;
            app.timerMessage = data.timerMessage;
            app.activePlayers = data.activePlayers;
        });

        myRoulette.on('winningNumber', function(data){
            app.winningNumber = data.winningNumber;
            app.Spin();
        });

        if(this.activePlayers.length == 0) $('.active-players').hide();
        
    },
});

</script>

<style scoped>
    button{
        width:100%;
    }
    form{
        width: 100%;
    }

    .timer{
        text-align: center;
        margin-bottom: 10px;
    }
    .box{
        margin-top: 10px;
    }
    
    p.amount{
        margin: 0px;
        float: right;
    }
    p.username{
        float: left;
    }

</style>