<% include ./components/header.ejs %>
<script src="https://code.jquery.com/jquery-3.2.1.js" integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE=" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>

<div class="columns" id="roulette-app">
    <div class="column">
        
    </div>
    <div class="column is-9 ">
        <h1 class="timer title is-5">{{timerMessage}}</h1>
        <div id="roulette"><div class="winner"></div></div>
            <div class="columns">
                <div class="column">
                    <input class="input" id="amount" name="amount" type="text" v-model="amount">
                </div>
                <div class="column">
                    <button type="button" class="button is-dark" id="x2"><span>X*2</span></button>
                </div>
                <div class="column">
                    <button type="button" class="button is-dark" id="div2"><span>X/2</span></button>
                </div>
                <div class="column">
                    <button type="button" class="button is-dark" id="clear"><span>Clear</span></button>
                </div>
            </div>
            <div class="columns">
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-danger" value="red" :disabled="!activeBetting"  @click="Bet(event)">Red</button>
                    <div class="active-players box">
                        <div class="columns">
                            <div class="column is-10 red-active-bets-username">
                                <div class="content">Total:</div>
                                <div class="content">Your bet:</div>
                            </div>
                            <div class="column red-active-bets-amount">
                                <div class="content">{{redTotalBet}}</div>
                                <div class="content">{{redYourBet}}</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-success" value="green" :disabled="!activeBetting" @click="Bet(event)">Green</button>
                    <div class="active-players box">
                        <div class="columns">
                            <div class="column is-10 green-active-bets-username">
                                <div class="content">Total:</div>
                                <div class="content">Your bet:</div>
                            </div>
                            <div class="column green-active-bets-amount">
                                <div class="content">{{greenTotalBet}}</div>
                                <div class="content">{{greenYourBet}}</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column">
                    <button type="submit" name="bet-option" class="button is-black" value="black" :disabled="!activeBetting"  @click="Bet(event)">Black</button>
                    <div class="active-players box">
                        <div class="columns">
                            <div class="column is-10 black-active-bets-username">
                                <div class="content">Total:</div>
                                <div class="content">Your bet:</div>
                            </div>
                            <div class="column black-active-bets-amount">
                                <div class="content">{{blackTotalBet}}</div>
                                <div class="content">{{blackYourBet}}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <input type="hidden" name='details'>
    </div>
</div>

<% include ./components/footer.ejs %>
<script>
    var myRoulette = io('http://localhost:3000/my-roulette', {forceNew: false});

    const app = new Vue({
    el: '#roulette-app',
    data:{
        timerMessage:null,
        timer: null,

        amount:0,

        redTotalBet: 0,
        greenTotalBet: 0,
        blackTotalBet: 0,

        redYourBet: 0,
        greenYourBet: 0,
        blackYourBet: 0,

        bets: [],   

        winningNumber: undefined,
        activeBetting: undefined,

        allNumbers: [1,14,2,13,3,12,4,0,11,5,10,6,9,7,8],
    },
    methods:{
        Bet(event){
            let choosenColor = event.target.value;
            
            if(app.timer>=0 && !isNaN(app.amount) && app.amount > 0){
                $.post('http://localhost:3000/play/roulette',{choosenColor: choosenColor, amount:app.amount});
            }
        },

        Spin(){
            let $roulette = $('#roulette');
            let $rouletteWidth = $roulette.width();
            let $rouletteNumberWidth = 75;
            let $roulettePosition;

            let positiveNumersHelper;
            let result = ($rouletteWidth / $rouletteNumberWidth) / Math.floor($rouletteWidth / $rouletteNumberWidth);

            let allNumbers = app.allNumbers;
            let positiveNumbers = [];
            let negativeNumbers = [];

            let winningNumber = app.winningNumber;

            if(result != 1) positiveNumersHelper = Math.floor($rouletteWidth / $rouletteNumberWidth / 2) + 1;
            else if(result == 1 ) positiveNumersHelper = result;

            for(let i = positiveNumersHelper -1 ; i>=0; i--){
                positiveNumbers.push(allNumbers[i]);
            }
            for(let i = positiveNumersHelper ; i< allNumbers.length; i++){
                negativeNumbers.push(allNumbers[i]);
            }

            if(positiveNumbers.includes(winningNumber)){
                let posHelper = positiveNumbers.indexOf(winningNumber) * 75;
                $roulette.addClass('roulette-spin');
                $roulette.css({'--spin': posHelper + (1125 * 8)});
                setTimeout(function(){
                    $roulette.css({'background-position-x': posHelper});
                    $roulette.removeClass('roulette-spin');
                },5000);
            }
            else if(negativeNumbers.includes(winningNumber)){
                let posHelper = negativeNumbers.indexOf(winningNumber) * 75 * -1;
                $roulette.addClass('roulette-spin');
                $roulette.css({'--spin': -75 + posHelper - (1125 * 8)});
                setTimeout(function(){
                    $roulette.css({'background-position-x': -75 + posHelper});
                    $roulette.removeClass('roulette-spin');
                },5000);
            }
        },

        Clear(){
            this.redTotalBet = 0;
            this.greenTotalBet = 0;
            this.blackTotalBet = 0;
            
            this.redYourBet = 0;
            this.greenYourBet = 0;
            this.blackYourBet = 0;

            $('.active-bets-username').remove();
            $('.active-bets-amount').remove();
        },

        newBet(data){
            $('.'+data.choosenColor+'-active-bets-username').append('<div class="active-bets-username">'+data.username+'</div>');
            $('.'+data.choosenColor+'-active-bets-amount').append('<div class="active-bets-amount">'+data.amount+'</div>');
            if(data.choosenColor == 'red')app.redTotalBet+=parseInt(data.amount);
            else if(data.choosenColor == 'green')app.greenTotalBet+=parseInt(data.amount);
            else if(data.choosenColor == 'black')app.blackTotalBet+=parseInt(data.amount);
        },

        onMountPlayers(){
            if(this.bets.length>0){
                this.bets.forEach(function(activePlayer){
                    $('.'+activePlayer.choosenColor+'-active-bets-username').append('<div class="active-bets-username">'+activePlayer.username+'</div>');
                    $('.'+activePlayer.choosenColor+'-active-bets-amount').append('<div class="active-bets-amount">'+activePlayer.amount+'</div>');
                    if(activePlayer.choosenColor == 'red')app.redTotalBet+=parseInt(activePlayer.amount);
                    else if(activePlayer.choosenColor == 'green')app.greenTotalBet+=parseInt(activePlayer.amount);
                    else if(activePlayer.choosenColor == 'black')app.blackTotalBet+=parseInt(activePlayer.amount);
                });
            }
        }
    },
    watch:{
        timer(){
            let $roulette = $('#roulette');
            if(app.timer>=  0){
                app.activeBetting = true;
            } 
            else app.activeBetting = false;

            if(app.timer==-9) this.Clear();
        },
    },

    mounted(){
        myRoulette.on('sendBet', function(data){
            app.newBet({username:data.newBet.username, amount:data.newBet.amount, choosenColor: data.newBet.choosenColor});
        });

        myRoulette.on('getBets', function(data){
            app.bets = data.bets;
            app.onMountPlayers();
        });

        myRoulette.on('sendData', function(data){
            app.timer = data.timer;
            app.timerMessage = data.timerMessage;
        });

        myRoulette.on('winningNumber', function(data){
            app.winningNumber = data.winningNumber;
            app.Spin();
        });
    },
});

</script>

<style scoped>

background:after{
    background-image: url('/roulette-background.jpg');
    background-position: center;
    background-size: cover;
}

button{
    width:100%;
}

.timer{
    color: white;
    text-align: center;
    margin-bottom: 10px;
}

.box{
    margin-top: 10px;
}

</style>